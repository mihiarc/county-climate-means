"""
Multiprocessing-safe progress tracking with Rich.

This module provides a progress tracking system that works with multiprocessing
by using a Queue to communicate progress updates from worker processes to a
main process that displays the Rich progress interface.
"""

import time
import multiprocessing as mp
from multiprocessing import Queue, Process
from typing import Dict, Optional, Any, List, Tuple
from dataclasses import dataclass
from datetime import datetime
import psutil

from rich.console import Console
from rich.layout import Layout
from rich.live import Live
from rich.panel import Panel
from rich.progress import (
    Progress,
    SpinnerColumn,
    BarColumn,
    TextColumn,
    TimeRemainingColumn,
    TimeElapsedColumn,
    MofNCompleteColumn,
    TaskProgressColumn,
)
from rich.table import Table
from rich.text import Text


@dataclass
class ProgressUpdate:
    """Progress update message for inter-process communication."""
    task_id: str
    update_type: str  # 'create', 'update', 'complete', 'fail'
    description: Optional[str] = None
    total: Optional[int] = None
    advance: Optional[int] = None
    completed: Optional[int] = None
    visible: Optional[bool] = None
    extra_data: Optional[Dict[str, Any]] = None


class MultiprocessingProgressTracker:
    """
    A Rich-based progress tracker that works with multiprocessing.
    
    This tracker runs in the main process and receives updates from
    worker processes via a Queue.
    """
    
    def __init__(self, title: str = "Climate Data Processing"):
        self.title = title
        self.console = Console()
        self.queue: Optional[Queue] = None
        self.process: Optional[Process] = None
        self._tasks: Dict[str, Any] = {}
        self._stats: Dict[str, Any] = {
            'start_time': None,
            'total_files': 0,
            'completed_files': 0,
            'failed_files': 0,
            'current_throughput': 0.0,
        }
        
    def start(self) -> Queue:
        """Start the progress tracker and return the queue for updates."""
        self.queue = mp.Queue()
        self.process = mp.Process(target=self._run_progress_display, args=(self.queue,))
        self.process.start()
        return self.queue
        
    def stop(self):
        """Stop the progress tracker."""
        if self.queue:
            self.queue.put(ProgressUpdate("__STOP__", "stop"))
            if self.process:
                self.process.join(timeout=5)
                if self.process.is_alive():
                    self.process.terminate()
                    
    def _run_progress_display(self, queue: Queue):
        """Run the Rich progress display in a separate process."""
        # Create progress bars with custom columns
        job_progress = Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]{task.description}"),
            BarColumn(),
            MofNCompleteColumn(),
            TimeElapsedColumn(),
            TimeRemainingColumn(),
            expand=True,
        )
        
        file_progress = Progress(
            TextColumn("[green]Files:"),
            BarColumn(),
            TaskProgressColumn(),
            TextColumn("• {task.fields[throughput]:.1f} files/s"),
            expand=True,
        )
        
        # Create layout
        layout = Layout()
        layout.split_column(
            Layout(Panel(Text(self.title, justify="center", style="bold magenta"), 
                        border_style="bright_blue"), size=3),
            Layout(name="main", ratio=1),
            Layout(name="footer", size=4),
        )
        
        # Initialize stats
        stats = {
            'start_time': time.time(),
            'total_files': 0,
            'completed_files': 0,
            'failed_files': 0,
            'current_throughput': 0.0,
        }
        
        # Task tracking
        tasks = {}
        file_task = file_progress.add_task("Overall", total=100, throughput=0.0)
        
        with Live(layout, console=self.console, refresh_per_second=4) as live:
            while True:
                try:
                    # Get update from queue (non-blocking with timeout)
                    update = queue.get(timeout=0.1)
                    
                    if update.update_type == "stop":
                        break
                        
                    # Handle different update types
                    if update.update_type == "create":
                        task_id = job_progress.add_task(
                            update.description or update.task_id,
                            total=update.total or 100,
                            visible=update.visible if update.visible is not None else True
                        )
                        tasks[update.task_id] = task_id
                        
                    elif update.update_type == "update":
                        if update.task_id in tasks:
                            job_progress.update(
                                tasks[update.task_id],
                                advance=update.advance,
                                completed=update.completed,
                                description=update.description,
                                visible=update.visible,
                            )
                            
                        # Update stats
                        if update.extra_data:
                            if 'completed_files' in update.extra_data:
                                stats['completed_files'] = update.extra_data['completed_files']
                            if 'failed_files' in update.extra_data:
                                stats['failed_files'] = update.extra_data['failed_files']
                            if 'total_files' in update.extra_data:
                                stats['total_files'] = update.extra_data['total_files']
                                
                    elif update.update_type == "complete":
                        if update.task_id in tasks:
                            job_progress.update(
                                tasks[update.task_id],
                                completed=update.total or 100,
                                visible=True
                            )
                            
                    elif update.update_type == "fail":
                        if update.task_id in tasks:
                            job_progress.update(
                                tasks[update.task_id],
                                description=f"[red]✗ {update.description or update.task_id}"
                            )
                            
                except:
                    # Queue timeout - just update display
                    pass
                    
                # Update throughput
                elapsed = time.time() - stats['start_time']
                if elapsed > 0 and stats['completed_files'] > 0:
                    stats['current_throughput'] = stats['completed_files'] / elapsed
                    
                # Update file progress
                if stats['total_files'] > 0:
                    file_progress.update(
                        file_task,
                        completed=stats['completed_files'],
                        total=stats['total_files'],
                        throughput=stats['current_throughput']
                    )
                    
                # Create stats table
                stats_table = self._create_stats_table(stats)
                
                # Update layout
                layout["main"].update(
                    Panel(job_progress, title="Processing Tasks", border_style="green")
                )
                layout["footer"].update(
                    Panel.fit(stats_table, title="System Stats", border_style="blue")
                )
                
    def _create_stats_table(self, stats: Dict[str, Any]) -> Table:
        """Create a table with system statistics."""
        table = Table(show_header=False, box=None)
        
        # System info
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        
        # Add stats
        elapsed = time.time() - stats['start_time']
        elapsed_str = f"{int(elapsed//60)}:{int(elapsed%60):02d}"
        
        table.add_row("Elapsed:", elapsed_str)
        table.add_row("Files:", f"{stats['completed_files']}/{stats['total_files']}")
        table.add_row("Failed:", f"{stats['failed_files']}")
        table.add_row("Throughput:", f"{stats['current_throughput']:.1f} files/s")
        table.add_row("CPU:", f"{cpu_percent:.1f}%")
        table.add_row("Memory:", f"{memory.percent:.1f}% ({memory.used/1e9:.1f}GB/{memory.total/1e9:.1f}GB)")
        
        return table


class ProgressReporter:
    """
    A simple class for worker processes to send progress updates.
    
    This is pickle-able and can be passed to worker processes.
    """
    
    def __init__(self, queue: Queue):
        self.queue = queue
        
    def create_task(self, task_id: str, description: str, total: int):
        """Create a new progress task."""
        self.queue.put(ProgressUpdate(
            task_id=task_id,
            update_type="create",
            description=description,
            total=total
        ))
        
    def update_task(self, task_id: str, advance: int = 1, **kwargs):
        """Update a progress task."""
        update = ProgressUpdate(
            task_id=task_id,
            update_type="update",
            advance=advance
        )
        if 'description' in kwargs:
            update.description = kwargs['description']
        if 'extra_data' in kwargs:
            update.extra_data = kwargs['extra_data']
        self.queue.put(update)
        
    def complete_task(self, task_id: str):
        """Mark a task as complete."""
        self.queue.put(ProgressUpdate(
            task_id=task_id,
            update_type="complete"
        ))
        
    def fail_task(self, task_id: str, error_msg: str = None):
        """Mark a task as failed."""
        self.queue.put(ProgressUpdate(
            task_id=task_id,
            update_type="fail",
            description=error_msg
        ))
        
    def update_stats(self, **kwargs):
        """Update global statistics."""
        self.queue.put(ProgressUpdate(
            task_id="__STATS__",
            update_type="update",
            extra_data=kwargs
        ))


def example_worker(worker_id: int, progress_reporter: ProgressReporter, num_files: int):
    """Example worker function showing how to use the progress reporter."""
    import random
    
    task_id = f"worker_{worker_id}"
    progress_reporter.create_task(task_id, f"Worker {worker_id}", num_files)
    
    for i in range(num_files):
        # Simulate processing
        time.sleep(random.uniform(0.1, 0.5))
        
        # Update progress
        progress_reporter.update_task(task_id, advance=1)
        progress_reporter.update_stats(
            completed_files=1,  # This would be cumulative in real usage
            total_files=num_files * 4  # Assuming 4 workers
        )
        
    progress_reporter.complete_task(task_id)


if __name__ == "__main__":
    # Example usage
    tracker = MultiprocessingProgressTracker("Example Processing")
    queue = tracker.start()
    
    # Create workers
    workers = []
    for i in range(4):
        reporter = ProgressReporter(queue)
        p = mp.Process(target=example_worker, args=(i, reporter, 10))
        p.start()
        workers.append(p)
        
    # Wait for workers
    for p in workers:
        p.join()
        
    # Stop tracker
    time.sleep(1)  # Let final updates process
    tracker.stop()